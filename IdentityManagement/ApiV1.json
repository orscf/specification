{
  "openapi": "3.0.1",
  "info": {
    "title": "ORSCF IdentityManagement-API",
    "description": "NOTE: This is not intended be a 'RESTful' api, as it is NOT located on the persistence layer and is therefore NOT focused on doing CRUD operations! This HTTP-based API uses a 'call-based' approach to known BL operations. IN-, OUT- and return-arguments are transmitted using request-/response- wrappers (see [UJMW](https://github.com/KornSW/UnifiedJsonMessageWrapper)), which are very lightweight and are a compromise for broad support and adaptability in REST-inspired technologies as well as soap-inspired technologies!",
    "contact": {
      "name": "Open Research Study Communication Format",
      "url": "https://orscf.org",
      "email": "info@orscf.org"
    },
    "version": "1.9.0"
  },
  "servers": [
    {
      "url": "/ims"
    }
  ],
  "paths": {
    "/ageEvaluation/evaluateAge": {
      "post": {
        "tags": [
          "AgeEvaluation"
        ],
        "summary": "Calculates the age (only the integer Year) of several persons for a given date. This is supporting the very common usecase to evaluate inclusion criteria for research studies where the date of birth is not present alongside of the medical data. It allows for minimalist access disclosing the date of birth information (as happening when unblinding).",
        "description": "Calculates the age (only the integer Year) of several persons for a given date. This is supporting the very common usecase to evaluate inclusion criteria for research studies where the date of birth is not present alongside of the medical data. It allows for minimalist access disclosing the date of birth information (as happening when unblinding).",
        "operationId": "EvaluateAge",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluateAgeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluateAgeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluateAgeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateAgeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imsApiInfo/getApiVersion": {
      "post": {
        "tags": [
          "ImsApiInfo"
        ],
        "summary": "returns the version of the ORSCF specification which is implemented by this API, (this can be used for backward compatibility within inhomogeneous infrastructures)",
        "description": "returns the version of the ORSCF specification which is implemented by this API, (this can be used for backward compatibility within inhomogeneous infrastructures)",
        "operationId": "GetApiVersion",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiVersionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiVersionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetApiVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiVersionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imsApiInfo/getCapabilities": {
      "post": {
        "tags": [
          "ImsApiInfo"
        ],
        "summary": "returns a list of API-features (there are several 'services' for different use cases, described by ORSCF) supported by this implementation. The following values are possible: 'ImsApiInfo', 'Pseudonymization', 'AgeEvaluation', 'Unblinding', 'UnblindingClearanceAwaiter'  (backend workflow for \"PASSIVE-APPROVAL\"), 'UnblindingClearanceGranting' (backend workflow for \"ACTIVE-APPROVAL\")",
        "description": "returns a list of API-features (there are several 'services' for different use cases, described by ORSCF) supported by this implementation. The following values are possible: 'ImsApiInfo', 'Pseudonymization', 'AgeEvaluation', 'Unblinding', 'UnblindingClearanceAwaiter'  (backend workflow for \"PASSIVE-APPROVAL\"), 'UnblindingClearanceGranting' (backend workflow for \"ACTIVE-APPROVAL\")",
        "operationId": "GetCapabilities",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCapabilitiesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCapabilitiesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetCapabilitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCapabilitiesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imsApiInfo/getPermittedAuthScopes": {
      "post": {
        "tags": [
          "ImsApiInfo"
        ],
        "summary": "returns a list of available capabilities (\"API:Pseudonymization\") and/or data-scopes (\"Study:9B2C3F48-2941-2F8F-4D35-7D117D5C6F72\") which are permitted for the CURRENT ACCESSOR and gives information about its 'authState', which can be: 0=auth needed / 1=authenticated / -1=auth expired / -2=auth invalid/disabled",
        "description": "returns a list of available capabilities (\"API:Pseudonymization\") and/or data-scopes (\"Study:9B2C3F48-2941-2F8F-4D35-7D117D5C6F72\") which are permitted for the CURRENT ACCESSOR and gives information about its 'authState', which can be: 0=auth needed / 1=authenticated / -1=auth expired / -2=auth invalid/disabled",
        "operationId": "GetPermittedAuthScopes",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPermittedAuthScopesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPermittedAuthScopesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetPermittedAuthScopesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPermittedAuthScopesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imsApiInfo/getOAuthTokenRequestUrl": {
      "post": {
        "tags": [
          "ImsApiInfo"
        ],
        "summary": "OPTIONAL: If the authentication on the current service is mapped using tokens and should provide information about the source at this point, the login URL to be called up via browser (OAuth <see href=\"https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html\">'CIBA-Flow'</see>) is returned here.",
        "description": "OPTIONAL: If the authentication on the current service is mapped using tokens and should provide information about the source at this point, the login URL to be called up via browser (OAuth <see href=\"https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html\">'CIBA-Flow'</see>) is returned here.",
        "operationId": "GetOAuthTokenRequestUrl",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOAuthTokenRequestUrlRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOAuthTokenRequestUrlRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetOAuthTokenRequestUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthTokenRequestUrlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imsApiInfo/getExtendedFieldDescriptors": {
      "post": {
        "tags": [
          "ImsApiInfo"
        ],
        "summary": "GetExtendedFieldDescriptors",
        "description": "GetExtendedFieldDescriptors",
        "operationId": "GetExtendedFieldDescriptors",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetExtendedFieldDescriptorsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetExtendedFieldDescriptorsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetExtendedFieldDescriptorsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExtendedFieldDescriptorsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pseudonymization/getOrCreatePseudonym": {
      "post": {
        "tags": [
          "Pseudonymization"
        ],
        "summary": "GetOrCreatePseudonym",
        "description": "GetOrCreatePseudonym",
        "operationId": "GetOrCreatePseudonym",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOrCreatePseudonymRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOrCreatePseudonymRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetOrCreatePseudonymRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrCreatePseudonymResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pseudonymization/getExisitingPseudonym": {
      "post": {
        "tags": [
          "Pseudonymization"
        ],
        "summary": "GetExisitingPseudonym",
        "description": "GetExisitingPseudonym",
        "operationId": "GetExisitingPseudonym",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetExisitingPseudonymRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetExisitingPseudonymRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetExisitingPseudonymRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExisitingPseudonymResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unblinding/requestUnblindingToken": {
      "post": {
        "tags": [
          "Unblinding"
        ],
        "summary": "Returns: 1: if clearance granted (token can be DIRECTLY used to call 'TryUnblind') / 0: if no realtime response is possible (delayed approval is outstanding) -1: if a new unblindingToken is required (because the current has expired or has been repressed) / -2: if the access is denied for addressed scope of data",
        "description": "Returns: 1: if clearance granted (token can be DIRECTLY used to call 'TryUnblind') / 0: if no realtime response is possible (delayed approval is outstanding) -1: if a new unblindingToken is required (because the current has expired or has been repressed) / -2: if the access is denied for addressed scope of data",
        "operationId": "RequestUnblindingToken",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUnblindingTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUnblindingTokenRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUnblindingTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestUnblindingTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unblinding/tryUnblind": {
      "post": {
        "tags": [
          "Unblinding"
        ],
        "summary": "Returns: 1: on SUCCESS (unblindedIdentities should contain data) / 0: if no realtime response is possible (delayed approval is outstanding) -1: if a new unblindingToken is required (because the current has expired or has been repressed) / -2: if the access is denied for addressed scope of data",
        "description": "Returns: 1: on SUCCESS (unblindedIdentities should contain data) / 0: if no realtime response is possible (delayed approval is outstanding) -1: if a new unblindingToken is required (because the current has expired or has been repressed) / -2: if the access is denied for addressed scope of data",
        "operationId": "TryUnblind",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TryUnblindRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TryUnblindRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TryUnblindRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TryUnblindResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unblindingClearanceAwaiter/grantClearanceForUnblinding": {
      "post": {
        "tags": [
          "UnblindingClearanceAwaiter"
        ],
        "summary": "GrantClearanceForUnblinding",
        "description": "GrantClearanceForUnblinding",
        "operationId": "GrantClearanceForUnblinding",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantClearanceForUnblindingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantClearanceForUnblindingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantClearanceForUnblindingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantClearanceForUnblindingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unblindingClearanceGranting/hasClearanceForUnblinding": {
      "post": {
        "tags": [
          "UnblindingClearanceGranting"
        ],
        "summary": "Returns: 1: if clearance granted / 0: if no realtime response is possible (delayed approval) -1: if a new unblindingToken is required (because the current has expired or has been repressed) / -2: if the access is denied for addressed scope of data",
        "description": "Returns: 1: if clearance granted / 0: if no realtime response is possible (delayed approval) -1: if a new unblindingToken is required (because the current has expired or has been repressed) / -2: if the access is denied for addressed scope of data",
        "operationId": "HasClearanceForUnblinding",
        "requestBody": {
          "description": "request capsule containing the method arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HasClearanceForUnblindingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HasClearanceForUnblindingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HasClearanceForUnblindingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HasClearanceForUnblindingResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EvaluateAgeRequest": {
        "required": [
          "momentOfValuation",
          "pseudonymesToEvaluate"
        ],
        "type": "object",
        "properties": {
          "momentOfValuation": {
            "type": "string",
            "description": "Required Argument for 'EvaluateAge' (DateTime)",
            "format": "date-time"
          },
          "pseudonymesToEvaluate": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required Argument for 'EvaluateAge' (string[])"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'EvaluateAge'.\r\nMethod: Calculates the age (only the integer Year) of several persons for a given date.\r\nThis is supporting the very common usecase to evaluate inclusion criteria for research studies where the date of birth is not present alongside of the medical data.\r\nIt allows for minimalist access disclosing the date of birth information (as happening when unblinding)."
      },
      "EvaluateAgeResponse": {
        "required": [
          "ages"
        ],
        "type": "object",
        "properties": {
          "ages": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Out-Argument of 'EvaluateAge' (Int32[]): Returns an array with the same amount of fields as the given 'pseudonymesToEvaluate'-array. If it was not possible to evalute the age beacuse of not present data, then the corresponding array-field will contain a value of -1!"
          },
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'EvaluateAge'.\r\nMethod: Calculates the age (only the integer Year) of several persons for a given date.\r\nThis is supporting the very common usecase to evaluate inclusion criteria for research studies where the date of birth is not present alongside of the medical data.\r\nIt allows for minimalist access disclosing the date of birth information (as happening when unblinding)."
      },
      "GetApiVersionRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetApiVersion'.\r\nMethod: returns the version of the ORSCF specification which is implemented by this API,\r\n(this can be used for backward compatibility within inhomogeneous infrastructures)"
      },
      "GetApiVersionResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "string",
            "description": "Return-Value of 'GetApiVersion' (String)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetApiVersion'.\r\nMethod: returns the version of the ORSCF specification which is implemented by this API,\r\n(this can be used for backward compatibility within inhomogeneous infrastructures)"
      },
      "GetCapabilitiesRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetCapabilities'.\r\nMethod: returns a list of API-features (there are several 'services' for different use cases, described by ORSCF)\r\nsupported by this implementation. The following values are possible:\r\n'ImsApiInfo',\r\n'Pseudonymization',\r\n'AgeEvaluation',\r\n'Unblinding',\r\n'UnblindingClearanceAwaiter'  (backend workflow for \"PASSIVE-APPROVAL\"),\r\n'UnblindingClearanceGranting' (backend workflow for \"ACTIVE-APPROVAL\")"
      },
      "GetCapabilitiesResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Return-Value of 'GetCapabilities' (String[])",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetCapabilities'.\r\nMethod: returns a list of API-features (there are several 'services' for different use cases, described by ORSCF)\r\nsupported by this implementation. The following values are possible:\r\n'ImsApiInfo',\r\n'Pseudonymization',\r\n'AgeEvaluation',\r\n'Unblinding',\r\n'UnblindingClearanceAwaiter'  (backend workflow for \"PASSIVE-APPROVAL\"),\r\n'UnblindingClearanceGranting' (backend workflow for \"ACTIVE-APPROVAL\")"
      },
      "GetPermittedAuthScopesRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetPermittedAuthScopes'.\r\nMethod: returns a list of available capabilities (\"API:Pseudonymization\") and/or\r\ndata-scopes (\"Study:9B2C3F48-2941-2F8F-4D35-7D117D5C6F72\")\r\nwhich are permitted for the CURRENT ACCESSOR and gives information about its 'authState', which can be:\r\n0=auth needed /\r\n1=authenticated /\r\n-1=auth expired /\r\n-2=auth invalid/disabled"
      },
      "GetPermittedAuthScopesResponse": {
        "required": [
          "authState"
        ],
        "type": "object",
        "properties": {
          "authState": {
            "type": "integer",
            "description": "Out-Argument of 'GetPermittedAuthScopes' (Int32)",
            "format": "int32"
          },
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Return-Value of 'GetPermittedAuthScopes' (String[])",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetPermittedAuthScopes'.\r\nMethod: returns a list of available capabilities (\"API:Pseudonymization\") and/or\r\ndata-scopes (\"Study:9B2C3F48-2941-2F8F-4D35-7D117D5C6F72\")\r\nwhich are permitted for the CURRENT ACCESSOR and gives information about its 'authState', which can be:\r\n0=auth needed /\r\n1=authenticated /\r\n-1=auth expired /\r\n-2=auth invalid/disabled"
      },
      "GetOAuthTokenRequestUrlRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetOAuthTokenRequestUrl'.\r\nMethod: OPTIONAL: If the authentication on the current service is mapped\r\nusing tokens and should provide information about the source at this point,\r\nthe login URL to be called up via browser (OAuth <see href=\"https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html\">'CIBA-Flow'</see>) is returned here."
      },
      "GetOAuthTokenRequestUrlResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "string",
            "description": "Return-Value of 'GetOAuthTokenRequestUrl' (String)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetOAuthTokenRequestUrl'.\r\nMethod: OPTIONAL: If the authentication on the current service is mapped\r\nusing tokens and should provide information about the source at this point,\r\nthe login URL to be called up via browser (OAuth <see href=\"https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html\">'CIBA-Flow'</see>) is returned here."
      },
      "GetExtendedFieldDescriptorsRequest": {
        "type": "object",
        "properties": {
          "languagePref": {
            "type": "string",
            "description": "Optional Argument for 'GetExtendedFieldDescriptors' (string): Preferred language for the 'DisplayLabel' and 'InputDescription' fields of the returned descriptors. ONLY RELEVANT FOR THE UI!",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetExtendedFieldDescriptors'."
      },
      "ExtendedFieldDescriptor": {
        "required": [
          "displayLabel",
          "isRequired",
          "technicalName"
        ],
        "type": "object",
        "properties": {
          "technicalName": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "displayLabel": {
            "type": "string"
          },
          "inputDescription": {
            "type": "string",
            "nullable": true
          },
          "regularExpression": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetExtendedFieldDescriptorsResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedFieldDescriptor"
            },
            "description": "Return-Value of 'GetExtendedFieldDescriptors' (ExtendedFieldDescriptor[])",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetExtendedFieldDescriptors'."
      },
      "GetOrCreatePseudonymRequest": {
        "required": [
          "birthDate",
          "extendedFields",
          "familyName",
          "givenName"
        ],
        "type": "object",
        "properties": {
          "givenName": {
            "type": "string",
            "description": "Required Argument for 'GetOrCreatePseudonym' (string): the Firstname a person (named as in the HL7 standard)"
          },
          "familyName": {
            "type": "string",
            "description": "Required Argument for 'GetOrCreatePseudonym' (string)"
          },
          "birthDate": {
            "type": "string",
            "description": "Required Argument for 'GetOrCreatePseudonym' (string): date in format 'yyyy-MM-dd' (must NOT be a partial date for this usecase!)"
          },
          "extendedFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Required Argument for 'GetOrCreatePseudonym' (Dictionary(String,String)): additional values for each 'extendedField' that is mandatory within (and specific to) the current IMS-System. To retrieve the declarations for such fields call 'GetExtendedFieldDescriptors'"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetOrCreatePseudonym'."
      },
      "GetOrCreatePseudonymResponse": {
        "required": [
          "pseudonym",
          "wasCreatedNewly"
        ],
        "type": "object",
        "properties": {
          "pseudonym": {
            "type": "string",
            "description": "Out-Argument of 'GetOrCreatePseudonym' (string)"
          },
          "wasCreatedNewly": {
            "type": "boolean",
            "description": "Out-Argument of 'GetOrCreatePseudonym' (bool)"
          },
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "boolean",
            "description": "Return-Value of 'GetOrCreatePseudonym' (Boolean)"
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetOrCreatePseudonym'."
      },
      "GetExisitingPseudonymRequest": {
        "required": [
          "birthDate",
          "extendedFields",
          "familyName",
          "givenName"
        ],
        "type": "object",
        "properties": {
          "givenName": {
            "type": "string",
            "description": "Required Argument for 'GetExisitingPseudonym' (string)"
          },
          "familyName": {
            "type": "string",
            "description": "Required Argument for 'GetExisitingPseudonym' (string)"
          },
          "birthDate": {
            "type": "string",
            "description": "Required Argument for 'GetExisitingPseudonym' (string): date in format 'yyyy-MM-dd' (must NOT be a partial date for this usecase!)"
          },
          "extendedFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Required Argument for 'GetExisitingPseudonym' (Dictionary(String,String)): additional values for each 'extendedField' that is mandatory within (and specific to) the current IMS-System. To retrieve the declarations for such fields call 'GetExtendedFieldDescriptors'"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GetExisitingPseudonym'."
      },
      "GetExisitingPseudonymResponse": {
        "required": [
          "pseudonym"
        ],
        "type": "object",
        "properties": {
          "pseudonym": {
            "type": "string",
            "description": "Out-Argument of 'GetExisitingPseudonym' (string)"
          },
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "boolean",
            "description": "Return-Value of 'GetExisitingPseudonym' (Boolean)"
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GetExisitingPseudonym'."
      },
      "RequestUnblindingTokenRequest": {
        "required": [
          "pseudonymsToUnblind",
          "requestBy",
          "requestReason"
        ],
        "type": "object",
        "properties": {
          "pseudonymsToUnblind": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required Argument for 'RequestUnblindingToken' (string[])"
          },
          "requestReason": {
            "type": "string",
            "description": "Required Argument for 'RequestUnblindingToken' (string)"
          },
          "requestBy": {
            "type": "string",
            "description": "Required Argument for 'RequestUnblindingToken' (string)"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'RequestUnblindingToken'.\r\nMethod: Returns:\r\n1: if clearance granted (token can be DIRECTLY used to call 'TryUnblind') /\r\n0: if no realtime response is possible (delayed approval is outstanding)\r\n-1: if a new unblindingToken is required (because the current has expired or has been repressed) /\r\n-2: if the access is denied for addressed scope of data"
      },
      "RequestUnblindingTokenResponse": {
        "required": [
          "unblindingToken"
        ],
        "type": "object",
        "properties": {
          "unblindingToken": {
            "type": "string",
            "description": "Out-Argument of 'RequestUnblindingToken' (string)"
          },
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "integer",
            "description": "Return-Value of 'RequestUnblindingToken' (Int32)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'RequestUnblindingToken'.\r\nMethod: Returns:\r\n1: if clearance granted (token can be DIRECTLY used to call 'TryUnblind') /\r\n0: if no realtime response is possible (delayed approval is outstanding)\r\n-1: if a new unblindingToken is required (because the current has expired or has been repressed) /\r\n-2: if the access is denied for addressed scope of data"
      },
      "IdentityDetails": {
        "required": [
          "birthDate",
          "familyName",
          "givenName"
        ],
        "type": "object",
        "properties": {
          "givenName": {
            "type": "string",
            "description": "the firstname a person (named as in the HL7 standard)"
          },
          "familyName": {
            "type": "string",
            "description": "the lastname a person (named as in the HL7 standard)"
          },
          "birthDate": {
            "type": "string",
            "description": "date in format 'yyyy-MM-dd' (must NOT be a partial date for this usecase!)"
          },
          "extendedFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "additional values for each 'extendedField' that is mandatory within (and specific to) the current IMS-System.\r\nTo retrieve the declarations for such fields call 'GetExtendedFieldDescriptors'",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TryUnblindRequest": {
        "required": [
          "pseudonymsToUnblind",
          "unblindedIdentities",
          "unblindingToken"
        ],
        "type": "object",
        "properties": {
          "unblindingToken": {
            "type": "string",
            "description": "Required Argument for 'TryUnblind' (string)"
          },
          "pseudonymsToUnblind": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required Argument for 'TryUnblind' (string[])"
          },
          "unblindedIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDetails"
            },
            "description": "Required Argument for 'TryUnblind' (IdentityDetails[])"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'TryUnblind'.\r\nMethod: Returns:\r\n1: on SUCCESS (unblindedIdentities should contain data) /\r\n0: if no realtime response is possible (delayed approval is outstanding)\r\n-1: if a new unblindingToken is required (because the current has expired or has been repressed) /\r\n-2: if the access is denied for addressed scope of data"
      },
      "TryUnblindResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "integer",
            "description": "Return-Value of 'TryUnblind' (Int32)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'TryUnblind'.\r\nMethod: Returns:\r\n1: on SUCCESS (unblindedIdentities should contain data) /\r\n0: if no realtime response is possible (delayed approval is outstanding)\r\n-1: if a new unblindingToken is required (because the current has expired or has been repressed) /\r\n-2: if the access is denied for addressed scope of data"
      },
      "GrantClearanceForUnblindingRequest": {
        "required": [
          "grantedUnitl",
          "pseudonymsToUnblind",
          "unblindingToken"
        ],
        "type": "object",
        "properties": {
          "unblindingToken": {
            "type": "string",
            "description": "Required Argument for 'GrantClearanceForUnblinding' (string)"
          },
          "pseudonymsToUnblind": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required Argument for 'GrantClearanceForUnblinding' (string[])"
          },
          "grantedUnitl": {
            "type": "string",
            "description": "Required Argument for 'GrantClearanceForUnblinding' (DateTime)",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'GrantClearanceForUnblinding'."
      },
      "GrantClearanceForUnblindingResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'GrantClearanceForUnblinding'."
      },
      "HasClearanceForUnblindingRequest": {
        "required": [
          "accessRelatedDetails",
          "pseudonymsToUnblind",
          "unblindingToken"
        ],
        "type": "object",
        "properties": {
          "unblindingToken": {
            "type": "string",
            "description": "Required Argument for 'HasClearanceForUnblinding' (string)"
          },
          "pseudonymsToUnblind": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required Argument for 'HasClearanceForUnblinding' (string[])"
          },
          "accessRelatedDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Required Argument for 'HasClearanceForUnblinding' (Dictionary(String,String)): an optional container that can contain for example the ipadress or JWT token of the accessor or some MFA related information"
          }
        },
        "additionalProperties": false,
        "description": "Contains arguments for calling 'HasClearanceForUnblinding'.\r\nMethod: Returns:\r\n1: if clearance granted /\r\n0: if no realtime response is possible (delayed approval)\r\n-1: if a new unblindingToken is required (because the current has expired or has been repressed) /\r\n-2: if the access is denied for addressed scope of data"
      },
      "HasClearanceForUnblindingResponse": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "string",
            "description": "This field contains error text equivalent to an Exception message! (note that only 'fault' XOR 'return' can have a value != null)",
            "nullable": true
          },
          "return": {
            "type": "integer",
            "description": "Return-Value of 'HasClearanceForUnblinding' (Int32)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contains results from calling 'HasClearanceForUnblinding'.\r\nMethod: Returns:\r\n1: if clearance granted /\r\n0: if no realtime response is possible (delayed approval)\r\n-1: if a new unblindingToken is required (because the current has expired or has been repressed) /\r\n-2: if the access is denied for addressed scope of data"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}